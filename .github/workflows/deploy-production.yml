name: Deploy to Production (Terraform Infrastructure)

on:
  push:
    branches: ["ready"]
    paths:
      - "backend/**"
      - ".github/workflows/deploy-production.yml"
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: predictor-model-prod-backend
  ECS_CLUSTER: predictor-model-prod-cluster
  ECS_SERVICE: predictor-model-prod-backend-service
  CONTAINER_NAME: backend

permissions:
  contents: read

jobs:
  testing:
    name: Test code
    runs-on: ubuntu-latest
    steps:
      - name: Testing backend code
        working-directory: ./backend
        run: |
          echo "Running tests"
          uv run pytest --cov=app --cov-report=term-missing -v

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        working-directory: ./backend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Building Docker image..."
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest

          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "âœ… Image pushed: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Force new ECS deployment
        run: |
          echo "Forcing new deployment for ECS service..."
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

          echo "âœ… Deployment triggered successfully"

      - name: Wait for service stability
        run: |
          echo "Waiting for service to become stable..."
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --region ${{ env.AWS_REGION }}

          echo "âœ… Service is stable"

      - name: Deployment Summary
        if: success()
        run: |
          echo "ðŸŽ‰ Deployment completed successfully!"
          echo "Image: ${{ steps.build-image.outputs.image }}"
          echo "Cluster: ${{ env.ECS_CLUSTER }}"
          echo "Service: ${{ env.ECS_SERVICE }}"
          echo "Region: ${{ env.AWS_REGION }}"
